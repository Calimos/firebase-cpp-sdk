name: Linux Unit Test

on: 
  push:
  pull_request:

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}-${{ matrix.generator }}
    runs-on: ${{ matrix.os }}
    strategy:
      # If any of the configurations fail, others will proceed to run
      fail-fast: false
      matrix:
        os: [ubuntu-latest,]
        build_type: ["Release"]
        architecture: ["x64",]
        python_version: [2.7]
        generator: ["Unix Makefiles",]
        include:
        - os: ubuntu-latest
          architecture: "x64"
          vcpkg_triplet: "x64-linux"

    steps:
      # Check out with submodule (vcpkg is a submodule)
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set env variables for subsequent steps (all)
        run: |
          echo "::set-env name=VCPKG_RESPONSE_FILE::external/vcpkg_${{ matrix.vcpkg_triplet }}_response_file.txt"
          echo "::set-env name=PIP_REQUIREMENTS_FILE::external/pip_requirements.txt"
          echo "::set-env name=MATRIX_UNIQUE_NAME::${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}-${{ matrix.generator }}"


      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.architecture }}

      - name: Install system level applications
        id: ubuntu-apt-install
        run: |
          sudo apt-get install openssl protobuf-compiler libprotobuf-dev

      # - name: Cache protobuf library
      #   id: cache-protobuf
      #   uses: actions/cache@v1
      #   with:
      #     path: protobuf
      #     key: ${{ runner.os }}-protobuf
      
      # - name: Build protobuf library
      #   if: steps.cache-protobuf.outputs.cache-hit != 'true'
      #   run: |
      #     git clone https://github.com/protocolbuffers/protobuf.git
      #     cd protobuf
      #     git submodule update --init --recursive
      #     ./autogen.sh
      #     ./autogen.sh
      #     ./configure
      #     make
      #     make check

      # - name: Install protobuf library
      #   run: |
      #     cd protobuf
      #     sudo make install
      #     sudo ldconfig

      - name: Install pip packages
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ env.PIP_REQUIREMENTS_FILE }}

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cmake \
            -S . \
            -B build \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=external/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} \

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.build_type }} -j 8

      - name: Print built libraries
        shell: bash
        run: |
          find build -name "*.lib"
          find build -name "*.dll"
          find build -name "*.dylib"
          find build -name "*.a"
          find build -name "*.so"

      - name: Unit Test
        shell: bash
        run: ctest --verbose
